import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { CacheableResponsePlugin } from "workbox-cacheable-response";
import {
  NetworkFirst,
  CacheFirst,
  StaleWhileRevalidate,
} from "workbox-strategies";

import CONFIG from "./config";
const BASE_URL = CONFIG.BASE_URL;

// Precache files generated by Workbox (injectManifest or generateSW)
precacheAndRoute(self.__WB_MANIFEST);

// Cache Google Fonts
registerRoute(
  ({ url }) =>
    url.origin === "https://fonts.googleapis.com" ||
    url.origin === "https://fonts.gstatic.com",
  new CacheFirst({
    cacheName: "google-fonts",
  })
);

// Cache Feathericons CDN (jika kamu pakai dari CDN, misalnya unpkg, jsdelivr, cdnjs, dll)
registerRoute(
  ({ url }) => url.href.includes("feather-icons") || url.href.includes("unpkg"),
  new CacheFirst({
    cacheName: "feathericons-cdn",
  })
);

// Cache Leaflet JS & CSS (via CDN)
registerRoute(
  ({ url }) =>
    url.href.includes("leaflet") &&
    (url.origin.includes("cdn.jsdelivr.net") || url.origin.includes("unpkg.com")),
  new CacheFirst({
    cacheName: "leaflet-assets",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache API requests (non-image)
registerRoute(
  ({ request, url }) => {
    const baseUrl = new URL(BASE_URL);
    return url.origin === baseUrl.origin && request.destination !== "image";
  },
  new NetworkFirst({
    cacheName: "alvingkysharingstories-api",
    networkTimeoutSeconds: 5,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache image from API
registerRoute(
  ({ request, url }) => {
    const baseUrl = new URL(BASE_URL);
    return url.origin === baseUrl.origin && request.destination === "image";
  },
  new StaleWhileRevalidate({
    cacheName: "alvingkysharingstories-api-images",
  })
);

// Cache Maptiler tiles
registerRoute(
  ({ url }) => url.origin.includes("maptiler"),
  new StaleWhileRevalidate({
    cacheName: "maptiler-api",
  })
);

// Handle notification clicks
self.addEventListener("notificationclick", (event) => {
  event.notification.close();

  const targetUrl = event.notification.data?.url || "/";

  event.waitUntil(
    clients
      .matchAll({ type: "window", includeUncontrolled: true })
      .then((windowClients) => {
        for (const client of windowClients) {
          if (client.url.includes(targetUrl) && "focus" in client) {
            return client.focus();
          }
        }

        if (clients.openWindow) {
          return clients.openWindow(targetUrl);
        }
      })
  );
});
